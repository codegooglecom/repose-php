#summary Sample Code
#labels Featured

= Introduction =

The following is a quick sample of using Repose for a small model. The sample system has Users, Projects and Bugs. A Project has a User designated as its manager. A bug has a User designated as its Reporter, and optionally a User designated as its Owner.

= Table of Contents =

<wiki:toc max_depth="2" />


= Models =

The `sample_User` class defines the User model. The only access to the ID from outside of the class is by `getUserId()`.

{{{
class sample_User {
    protected $userId;
    protected $name;
    public function __construct($name) {
        $this->name = $name;
    }
    public function getUserId() {
        return $this->userId;
    }
    public function getName() {
        return $this->name;
    }
    public function setName($name) {
        $this->name = $name;
    }
}
}}}

The `sample_Project` class defines the Project model. The only access to the ID from outside of the class is by `getProjectId()`. It references a manager object that is supposed to be an instance of `sample_User`.

{{{
class sample_Project {
    protected $projectId;
    protected $name;
    protected $manager;
    public function __construct($name, $manager) {
        $this->name = $name;
        $this->manager = $manager;
    }
    public function getProjectId() {
        return $this->projectId;
    }
    public function getName() {
        return $this->name;
    }
    public function setName($name) {
        $this->name = $name;
    }
    public function getManager() {
        return $this->manager;
    }
    public function setManager($manager) {
        $this->manager = $manager;
    }
}
}}}

The `sample_Bug` class defines the Bug model. The only access to the ID from outside of the class is by `getBugId()`. It references a project (`sample_Project` instance), reporter (`sample_User` instance) and owner (`sample_User` instance, optional ) objects.

{{{
class sample_Bug {
    protected $bugId;
    protected $title;
    protected $body;
    protected $projectId;
    protected $reporter;
    protected $owner;
    public function __construct($project, $title, $body, $reporter, $owner = null) {
        $this->project = $project;
        $this->title = $title;
        $this->body = $body;
        $this->reporter = $reporter;
        $this->owner = $owner;
    }
    public function getBugId() {
        return $this->bugId;
    }
    public function getProject() {
        return $this->project;
    }
    public function setProject($project) {
        $this->project = $project;
    }
    public function getTitle() {
        return $this->title;
    }
    public function setTitle($title) {
        $this->title = $title;
    }
    public function getBody() {
        return $this->body;
    }
    public function setBody($body) {
        $this->body = $body;
    }
    public function getReporter() {
        return $this->reporter;
    }
    public function setReporter($reporter) {
        $this->reporter = $reporter;
    }
    public function getOwner() {
        return $this->owner;
    }
    public function setOwner($owner) {
        $this->owner = $owner;
    }
}
}}}

= Calling Code =

Using Repose is done primarily through a `repose_Session` instance. A quick example of creating `sample_User`, `sample_Project` and `sample_Bug` instances and persisting them is  below.

{{{
$userBeau = new sample_User('beau');
$userJosh = new sample_User('josh');

$project = new sample_Project('Sample Project', $userBeau);

$bug = new sample_Bug(
    $project,
    'Something is broken',
    'Click http://example.com/ to test!',
    $userJosh, // Reporter
    $userBeau // Owner
);

$session->save($bug);
}}}

Calling `$session->save()` will cascade `repose_Session::saveOrUpdate()` the `sample_Bug` instance and all other object instances associated with the `sample_Bug`. In this case, it means that `$userBeau`, `$userJosh` and `$project` will be persisted automatically.

= Configuration =

Repose requires configuration to map the Models to the database structure.

{{{
$configuration = new repose_Configuration(array(

    'connection' => array( 'dsn' => 'sqlite:database.sq3' ),

    'classes' => array(

        'sample_Project' => array(
            'tableName' => 'project',
            'properties' => array(
                'projectId' => array( 'primaryKey' => 'true', ),
                'name' => null,
                'manager' => array(
                    'relationship' => 'many-to-one',
                    'className' => 'sample_User',
                    'columnName' => 'managerUserId',
                ),
            ),
        ),

        'sample_Bug' => array(
            'tableName' => 'bug',
            'properties' => array(
                'bugId' => array( 'primaryKey' => 'true', ),
                'title' => null,
                'body' => null,
                'project' => array(
                    'relationship' => 'many-to-one',
                    'className' => 'sample_Project',
                ),
                'reporter' => array(
                    'relationship' => 'many-to-one',
                    'className' => 'sample_User',
                    'columnName' => 'reporterUserId',
                ),
                'owner' => array(
                    'relationship' => 'many-to-one',
                    'className' => 'sample_User',
                    'columnName' => 'ownerUserId',
                ),
            ),
        ),

        'sample_User' => array(
            'tableName' => 'user',
            'properties' => array(
                'userId' => array( 'primaryKey' => 'true', ),
                'name' => null,
            ),
        ),

    ),
));
$sessionFactory = $configuration->buildSessionFactory();
$session = $sessionFactory->getCurrentSession();
}}}

= Utility Singleton =

It would be relatively trivial to create a Singleton helper class to get access to the current session without having to jump through these hoops in calling code.

{{{
class MyProjectReposeUtil {
    static private $configuration = null;
    static private $sessionFactory = null;
    static public function getConfiguration() {
        if ( self::$configuration === null ) {
            self::$configuration = new repose_Configuration(array(

                'autoload' => array($this, 'loadClass'),

                'connection' => array( 'dsn' => 'sqlite:' . dirname(__FILE__) . DIRECTORY_SEPARATOR . 'ReposeBasicTest.sq3', ),

                'classes' => array(

                    'sample_Project' => array(
                        'tableName' => 'project',
                        'properties' => array(
                            'projectId' => array( 'primaryKey' => 'true', ),
                            'name' => null,
                            'manager' => array(
                                'relationship' => 'many-to-one',
                                'className' => 'sample_User',
                                'columnName' => 'managerUserId',
                                //'foreignKey' => 'userId', // should get this itself!
                            ),
                        ),
                    ),

                    'sample_Bug' => array(
                        'tableName' => 'bug',
                        'properties' => array(
                            'bugId' => array( 'primaryKey' => 'true', ),
                            'title' => null,
                            'body' => null,
                            'project' => array(
                                'relationship' => 'many-to-one',
                                'className' => 'sample_Project',
                            ),
                            'reporter' => array(
                                'relationship' => 'many-to-one',
                                'className' => 'sample_User',
                                'columnName' => 'reporterUserId',
                            ),
                            'owner' => array(
                                'relationship' => 'many-to-one',
                                'className' => 'sample_User',
                                'columnName' => 'ownerUserId',
                            ),
                        ),
                    ),

                    'sample_User' => array(
                        'tableName' => 'user',
                        'properties' => array(
                            'userId' => array( 'primaryKey' => 'true', ),
                            'name' => null,
                        ),
                    ),

                ),
            ));
        }
        return self::$configuration;
    }
    static public function getSessionFactory() {
        if ( self::$sessionFactory === null ) {
            self::$sessionFactory = self::getConfiguration()->buildSessionFactory();
        }
        return self::$sessionFactory;
    }
    static public function getSession() {
        return self::getSessionFactory()->getCurrentSession();
    }
}
}}}

This utility class could be used like this anywhere the Repose session is needed.

{{{
$session = MyProjectReposeUtil::getSession();
$session->save($bug);
}}}